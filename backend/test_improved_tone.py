#!/usr/bin/env python3
"""
Test improved conversational tone in LLM responses.
"""

import sys
import os
import requests
import json

API_BASE_URL = "http://localhost:8000"

def test_conversational_tone():
    """Test that responses use natural, conversational tone"""
    print("=== Testing Improved Conversational Tone ===")
    
    # Create session
    session_response = requests.post(
        f"{API_BASE_URL}/api/chatbot/chat/sessions",
        headers={'Content-Type': 'application/json'},
        json={"user_id": "test_improved_tone"}
    )
    
    if session_response.status_code != 200:
        print(f"‚ùå Failed to create session: {session_response.status_code}")
        return False
    
    session_id = session_response.json()['session_id']
    print(f"‚úÖ Created session: {session_id[:8]}...")
    
    test_cases = [
        {
            "query": "Where is your clinic located",
            "expected_phrases": ["Based on what I know", "our dental clinic", "112 Lengkong Tiga"],
            "avoid_phrases": ["Thank you for reaching out", "According to our context", "According to the context"]
        },
        {
            "query": "What are your office hours",
            "expected_phrases": ["Monday through Friday", "8:00 AM to 6:00 PM", "Saturday"],
            "avoid_phrases": ["Thank you for reaching out", "According to our context", "According to the context"]
        },
        {
            "query": "How often should I brush my teeth",
            "expected_phrases": ["twice a day", "fluoride toothpaste", "2 minutes"],
            "avoid_phrases": ["Thank you for reaching out", "According to our context", "No specific context"]
        }
    ]
    
    all_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç Test {i}: '{test_case['query']}'")
        
        response = requests.post(
            f"{API_BASE_URL}/api/chatbot/chat",
            headers={'Content-Type': 'application/json'},
            json={
                "query": test_case['query'],
                "session_id": session_id,
                "user_id": "test_improved_tone"
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            response_text = data.get('response', '').lower()
            
            # Check for expected phrases
            found_expected = []
            for phrase in test_case['expected_phrases']:
                if phrase.lower() in response_text:
                    found_expected.append(phrase)
            
            # Check for avoided phrases
            found_avoided = []
            for phrase in test_case['avoid_phrases']:
                if phrase.lower() in response_text:
                    found_avoided.append(phrase)
            
            # Evaluate tone
            conversational_indicators = [
                "hi there", "so you're", "based on what i know", 
                "from our clinic", "it's always", "i recommend",
                "feel free", "happy to help"
            ]
            
            tone_score = sum(1 for indicator in conversational_indicators if indicator in response_text)
            
            print(f"   üìù Response length: {len(data.get('response', ''))} characters")
            print(f"   ‚úÖ Found expected phrases: {len(found_expected)}/{len(test_case['expected_phrases'])}")
            print(f"   üö´ Avoided formal phrases: {len(found_avoided) == 0}")
            print(f"   üí¨ Conversational tone score: {tone_score}")
            
            if found_expected and not found_avoided and tone_score > 0:
                print(f"   ‚úÖ PASSED - Natural, conversational tone")
            else:
                print(f"   ‚ùå FAILED - Tone needs improvement")
                all_passed = False
                if found_avoided:
                    print(f"      Found unwanted phrases: {found_avoided}")
        else:
            print(f"   ‚ùå Request failed: {response.status_code}")
            all_passed = False
    
    return all_passed

def analyze_tone_improvements():
    """Analyze the specific improvements made"""
    print(f"\n=== Tone Improvement Analysis ===")
    
    print(f"üéØ BEFORE (Formal/Robotic):")
    print(f"   ‚ùå 'Thank you for reaching out to our dental practice!'")
    print(f"   ‚ùå 'According to our context, our clinic is located...'")
    print(f"   ‚ùå 'Based on the following dental knowledge base context...'")
    print(f"   ‚ùå Overly formal and repetitive introductions")
    
    print(f"\nüéâ AFTER (Natural/Conversational):")
    print(f"   ‚úÖ 'Hi there! Based on what I know...'")
    print(f"   ‚úÖ 'So you're wondering about...'")
    print(f"   ‚úÖ 'From our clinic information...'")
    print(f"   ‚úÖ Natural, friendly, and helpful tone")
    
    print(f"\nüìã KEY CHANGES:")
    print(f"   1. üó£Ô∏è More conversational language")
    print(f"   2. üö´ Removed formal corporate phrases")
    print(f"   3. üí¨ Natural context integration")
    print(f"   4. üòä Friendly, approachable tone")
    print(f"   5. üéØ Direct and helpful responses")

def test_clinic_vs_general_info():
    """Test that both clinic-specific and general dental info are handled well"""
    print(f"\n=== Testing Clinic vs General Information ===")
    
    session_response = requests.post(
        f"{API_BASE_URL}/api/chatbot/chat/sessions",
        headers={'Content-Type': 'application/json'},
        json={"user_id": "test_info_types"}
    )
    
    session_id = session_response.json()['session_id']
    
    test_cases = [
        {
            "query": "Where is your clinic located",
            "type": "clinic_specific",
            "should_have_sources": True
        },
        {
            "query": "How to prevent tooth decay",
            "type": "general_dental",
            "should_have_sources": False  # May or may not have sources
        }
    ]
    
    for test_case in test_cases:
        print(f"\nüîç Testing {test_case['type']}: '{test_case['query']}'")
        
        response = requests.post(
            f"{API_BASE_URL}/api/chatbot/chat",
            headers={'Content-Type': 'application/json'},
            json={
                "query": test_case['query'],
                "session_id": session_id,
                "user_id": "test_info_types"
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            sources = data.get('sources', [])
            response_text = data.get('response', '')
            
            print(f"   üìä Sources found: {len(sources)}")
            print(f"   üìù Response quality: {'Good' if len(response_text) > 100 else 'Short'}")
            
            if test_case['type'] == 'clinic_specific':
                if sources:
                    print(f"   ‚úÖ Clinic-specific info with sources")
                else:
                    print(f"   ‚ö†Ô∏è  Clinic query but no sources found")
            else:
                print(f"   ‚úÖ General dental information provided")

def main():
    """Main test function"""
    print("=== Testing Improved LLM Response Tone ===")
    print("Goal: Natural, conversational responses for dental assistance\n")
    
    tone_success = test_conversational_tone()
    analyze_tone_improvements()
    test_clinic_vs_general_info()
    
    print(f"\n=== Tone Improvement Test Results ===")
    print(f"Conversational tone: {'‚úÖ IMPROVED' if tone_success else '‚ùå NEEDS WORK'}")
    
    if tone_success:
        print("üéâ LLM responses now use natural, conversational tone!")
        print("\nKey improvements:")
        print("‚Ä¢ Removed formal corporate language")
        print("‚Ä¢ Uses 'Based on what I know' instead of 'According to context'")
        print("‚Ä¢ More friendly and approachable responses")
        print("‚Ä¢ Natural integration of clinic and general dental information")
        return True
    else:
        print("‚ö†Ô∏è  Response tone may need further refinement")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)